<?php

/**
 * @file
 * Bibcite customizations for Openscholar.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\bibcite_entity\Entity\KeywordInterface;
use Drupal\bibcite_entity\Entity\ReferenceType;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\os_publications\RepecHelper;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Ds\Map;

/**
 * Implements hook_views_data_alter().
 */
function os_publications_views_data_alter(array &$data) {
  $data['bibcite_reference']['first_letter_last_name_author'] = [
    'title' => t("First letter of Author's last name"),
    'field' => [
      'id' => 'os_publications_first_letter_last_name_author',
    ],
  ];

  $data['bibcite_contributor']['first_letter_last_name_author'] = [
    'title' => t("First letter of Author's last name"),
    'sort' => [
      'id' => 'os_publications_first_letter_last_name_author',
      'field' => 'last_name',
    ],
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function os_publications_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() !== 'publications') {
    return;
  }
  /** @var \Drupal\Core\Config\ImmutableConfig $os_publication_settings */
  $os_publication_settings = \Drupal::config('os_publications.settings');

  // Alter "publication type" filter.
  foreach ($query->where as &$condition_group) {
    foreach ($condition_group['conditions'] as &$condition) {
      if ($condition['field'] !== 'bibcite_reference.type') {
        continue;
      }

      // Alter values passed to reference_type condition.
      /** @var array $allowed_publication_types */
      $allowed_publication_types = $os_publication_settings->get('filter_publication_types');

      // If type query parameter exists we will override allowed array.
      $request_query = Drupal::request()->query;
      if ($type = $request_query->get('type')) {
        // Override filtering by request query.
        $allowed_publication_types = [
          $type => $type,
        ];
      }
      // Convert the array structure into views suitable format.
      // Array structure obtained from config is:
      // [
      // 'artwork' => 'artwork',
      // 'journal' => 'journal',
      // 'software' => 0,
      // ]
      // While views expects it to be like:
      // [
      // 0 => 'artwork',
      // 1 => 'journal',
      // ].
      $condition['value'] = array_filter(array_values($allowed_publication_types));
    }
  }

  // Alter sorting order.
  // A mapping of display_id and the field whose sort order will be altered.
  $mapping = new Map();
  $mapping->put('page_1', 'bibcite_reference_type');
  $mapping->put('page_2', 'bibcite_reference_title_first_char_excl_prep');
  $mapping->put('page_3', 'first_letter_last_name_author');
  $mapping->put('page_4', 'bibcite_reference_bibcite_year');

  /** @var string $sort_order */
  $sort_order = $os_publication_settings->get('biblio_order');

  foreach ($query->orderby as &$group) {
    if ($group['field'] === $mapping->get($view->current_display, NULL)) {
      $group['direction'] = $sort_order;
    }

    // Additionaly, sorting of rows inside every group in publications by
    // author can also be controlled from the setting.
    if ($view->current_display === 'page_2' && $group['field'] === 'bibcite_reference_title') {
      $group['direction'] = $sort_order;
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function os_publications_page_attachments(array &$page) {
  $current_route = \Drupal::routeMatch();
  $types = [];
  $entity_id = [];
  $meta = [];
  /** @var \Drupal\os_publications\Plugin\CitationDistribution\CitationDistributePluginManager $type */
  $type = \Drupal::service('os_publications.manager_citation_distribute');
  $plugins = $type->getDefinitions();

  // Adds metadata to the publications pages.
  $entities = $current_route->getParameters();
  if ($entities->has('bibcite_reference') && strpos($current_route->getRouteName(), 'canonical')) {
    foreach ($entities as $entity => $value) {
      $repos = $value->distribution->getString();
      $repos = explode(',', $repos);
      $types[] = $entity;
      $entity_id[$entity] = $value->id();

      foreach ($plugins as $plugin) {
        if (in_array('bibcite_reference', $types)) {
          if (isset($plugin['type']) && in_array($plugin['id'], $repos) && $plugin['type'] == 'metadata') {
            $service = $type->createInstance($plugin['id']);
            if ($service && method_exists($service, 'render')) {
              $meta = $service->render($entity_id['bibcite_reference']);
            }
          }
        }
        foreach ($meta as $key => $item) {
          $page['#attached']['html_head'][] = [$item, $key];
        }
      }
    }
    /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $publication */
    $publication = $entities->get('bibcite_reference');
    // If noindex is on then add required tags.
    $noindex = $publication ? $publication->noindex->value : NULL;
    if ($noindex) {
      $noindex_tag = [
        '#tag' => 'meta',
        '#attributes' => [
          'name' => 'robots',
          'content' => 'NOINDEX, NOFOLLOW',
        ],
      ];
      $page['#attached']['html_head'][] = [$noindex_tag, 'robots'];
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function os_publications_views_pre_render(ViewExecutable $view) {
  if ($view->id() !== 'publications') {
    return;
  }

  if ($view->current_display !== 'cp') {

    // Include citation download button.
    $view->attachment_before = \Drupal::service('os_publications.citation_helper')->getCitationDownloadButton();

    // Convert citation title into publication entity page's url.
    $results = $view->result;

    foreach ($results as $result) {
      $publication = $result->_entity;
      $text = Markup::create($publication->html_title->value);
      $link = $publication->toLink($text)->toString();
      $publication->html_title->value = $link;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function os_publications_bibcite_reference_presave(EntityInterface $entity) {
  /** @var \Drupal\os_publications\PublicationsListingHelperInterface $publications_listing_helper */
  $publications_listing_helper = \Drupal::service('os_publications.listing_helper');

  $label = strip_tags(html_entity_decode($entity->html_title->value));
  // Set the label anyway to be used in places such as breadcrumbs.
  // For other uses we will use html title field.
  $entity->title->value = $label;

  $entity->set('title_first_char_excl_prep', [
    'value' => $publications_listing_helper->convertLabel($label),
  ]);
}

/**
 * Implements hook_entity_base_field_info().
 */
function os_publications_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'bibcite_reference') {
    $options = [];
    /** @var \Drupal\os_publications\Plugin\CitationDistribution\CitationDistributePluginManager $type */
    $type = \Drupal::service('os_publications.manager_citation_distribute');
    /** @var array $plugins */
    $plugins = $type->getDefinitions();
    foreach ($plugins as $plugin) {
      $link = Link::fromTextAndUrl($plugin['name'], Url::fromUri($plugin['href']))->toString();
      $options[$plugin['id']] = $link;
    }

    $fields['distribution'] = BaseFieldDefinition::create('list_string')
      ->setLabel(t("Distribute to Repositories"))
      ->setSetting('allowed_values', $options)
      ->setCardinality(-1)
      ->setDisplayOptions('form', [
        'type' => 'options_buttons',
        'settings' => [
          'display_label' => FALSE,
        ],
        'weight' => '10',
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['is_sticky'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Sticky at top of lists'))
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['title_first_char_excl_prep'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Title first letter excluding prepositions'))
      ->setRevisionable(TRUE);

    $fields['full_text'] = BaseFieldDefinition::create('text_long')
      ->setLabel('FULL TEXT')
      ->setDescription('You can enter the full text of your article here, although most people upload PDFs instead.')
      ->setTranslatable(TRUE)
      ->setDisplayOptions('view', [
        'type' => 'text_default',
        'weight' => 5,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'text_textfield',
        'weight' => 5,
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['notes'] = BaseFieldDefinition::create('text_long')
      ->setLabel('NOTES')
      ->setDescription("This note will appear after the abstract. Your notes are currently set to private. You can make this change in the publications section of your control panel's App settings")
      ->setTranslatable(TRUE)
      ->setDisplayOptions('view', [
        'type' => 'text_default',
        'weight' => 6,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'text_textfield',
        'weight' => 6,
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['html_title'] = BaseFieldDefinition::create('text_long')
      ->setLabel('Title')
      ->setTranslatable(TRUE)
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('form', [
        'type' => 'text_textarea',
        'weight' => -10,
        'settings' => [
          'rows' => 1,
        ],
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['path'] = BaseFieldDefinition::create('path')
      ->setCustomStorage(TRUE)
      ->setLabel(t('URL'))
      ->setTranslatable(TRUE)
      ->setComputed(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'path',
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    $fields['created'] = BaseFieldDefinition::create('created')
      ->setLabel(t('Authored on'))
      ->setDescription(t('The time that the publication was created.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'datetime_timestamp',
        'weight' => 10,
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);

    $fields['noindex'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Prevent this page from'))
      ->setDescription(t('appearing in search engine results'))
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
      ])
      ->setRevisionable(TRUE)
      ->setDisplayConfigurable('form', TRUE);

    return $fields;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function os_publications_form_bibcite_reference_form_alter(&$form, FormStateInterface $form_state) {
  $config_factory = \Drupal::service('config.factory');
  /** @var array $auto_flags */
  $auto_flags = $config_factory->get('os_publications.settings')->get('citation_distribute_autoflags');
  /** @var \Drupal\bibcite_entity\Entity\ReferenceInterface $reference */
  $reference = $form_state->getFormObject()->getEntity();

  if ($reference->id() === NULL) {
    $form['distribution']['widget']['#default_value'] = array_keys(array_filter($auto_flags));
  }

  // Move required fields out of vertical tabs.
  $reference_type = ReferenceType::load($reference->bundle());
  $required_fields = array_filter($reference_type->getFields(), function ($item) {
    return ($item['visible'] && $item['required']);
  });
  foreach ($required_fields as $field => $data) {
    $form[$field]['#group'] = 'content';
  }

  // Set custom title filter for html title field and hide existing title field.
  $form['html_title']['widget']['0']['#format'] = 'title_filter';
  $form['#attached']['library'][] = 'os_publications/drupal.os_publications';
  $form['title']['#access'] = FALSE;

  // Put the delete button at the end of the actions list.
  // Cancel button's weight is 30, this needs to be higher than that.
  $form['actions']['delete']['#weight'] = 100;

  // Menu link options.
  $vsite = \Drupal::service('vsite.context_manager')->getActiveVsite();
  $defaults = \Drupal::service('cp_menu.menu_helper')->getMenuLinkDefaults($reference, $vsite);

  $menus = $vsite->getContent('group_menu:menu');

  if (!$menus) {
    $vsite_menus = [
      'main' => 'Primary Menu',
      'footer' => 'Secondary Menu',
    ];
  }
  elseif ($menus) {
    foreach ($menus as $menu) {
      $vsite_menus[$menu->entity_id_str->target_id] = $menu->label();
    }
  }

  // Publication details group.
  $form['publication_details'] = [
    '#type' => 'details',
    '#title' => t('Publication Details'),
    '#group' => 'content',
    '#weight' => 65,
  ];
  $form['full_text']['#group'] = 'publication_details';
  $form['notes']['#group'] = 'publication_details';
  $form['field_publication_image']['#group'] = 'publication_details';
  $form['field_extra_fields']['#group'] = 'publication_details';

  // Publishing options group.
  $form['publishing_options'] = [
    '#type' => 'details',
    '#title' => t('Publishing Options'),
    '#group' => 'advanced',
    '#weight' => 1,
  ];
  $form['status']['#group'] = 'publishing_options';
  $form['status']['widget']['value']['#title'] = t('Published to this site');
  $form['is_sticky']['#group'] = 'publishing_options';
  $form['noindex']['#group'] = 'publishing_options';

  // Url group.
  $form['path']['widget']['0']['#group'] = 'advanced';
  $form['path']['widget']['0']['#weight'] = 2;
  $form['path']['widget']['0']['#access'] = TRUE;
  $form['path']['#access'] = TRUE;

  // Menu group.
  $form['menu'] = [
    '#type' => 'details',
    '#title' => t('Menu settings'),
    '#group' => 'advanced',
    '#attached' => [
      'library' => ['menu_ui/drupal.menu_ui'],
    ],
    '#tree' => TRUE,
    '#weight' => 3,
    '#attributes' => ['class' => ['menu-link-form']],
  ];

  // Distribute to repos group.
  $form['distribute_to_repos'] = [
    '#type' => 'details',
    '#title' => t('Distribute to Academic Repositories'),
    '#group' => 'advanced',
    '#weight' => 4,
  ];
  $form['distribution']['#group'] = 'distribute_to_repos';

  // Authoring information group.
  $form['authoring_info'] = [
    '#type' => 'details',
    '#title' => t('Post Created/Edited By'),
    '#group' => 'advanced',
    '#weight' => 5,
  ];
  $form['created']['#group'] = 'authoring_info';
  $form['uid']['#group'] = 'authoring_info';
  $form['created']['#access'] = TRUE;
  $form['uid']['#access'] = TRUE;

  // Revision information group.
  if ($reference->id()) {
    // Revision checkbox and log message title change.
    $form['revision']['#title'] = t('When checked, a new version of this content will be created');
    $form['revision']['#default_value'] = TRUE;
    $form['revision_log_message']['widget']['0']['value']['#title'] = t('Revision Notes');
    // Revision info changes.
    $form['revision_information']['#group'] = 'advanced';
    $form['revision_information']['#type'] = 'details';
    $form['revision_information']['#title'] = t('Revision Information');
    $form['revision_information']['#weight'] = 6;

    // Get number of revisions for this publication.
    $rev_query = Drupal::database()->select('bibcite_reference_revision', 'rev')
      ->fields('rev', ['id'])
      ->condition('id', $reference->id());
    $num_revisions = count($rev_query->execute()->fetchAll()) - 1;
    if ($num_revisions > 0) {
      $revisions_url = Url::fromRoute('entity.bibcite_reference.version_history', ['bibcite_reference' => $reference->id()])
        ->setOption('attributes', ['id' => 'revisons-links']);
      $rev_link = Link::fromTextAndUrl(t("@num revisions", ['@num' => ' ' . $num_revisions]), $revisions_url)
        ->toString();
      $form['revision_information']['info']['#markup'] = '<p>' . t("There are currently") . $rev_link . '.</p>';
      $form['revision_information']['help'] = [
        '#type' => 'link',
        '#title' => t('What’s being stored as a revision?'),
        '#url' => Url::fromUri('https://help.theopenscholar.com/revisions'),
        '#weight' => 50,
      ];
    }
  }
  elseif (!$reference->id()) {
    unset($form['revision'], $form['revision_information'], $form['revision_log_message']);
  }

  $form['menu']['enabled'] = [
    '#type' => 'checkbox',
    '#title' => t('Provide a menu link'),
    '#default_value' => (int) (bool) $defaults['id'],
  ];
  $form['menu']['link'] = [
    '#type' => 'container',
    '#parents' => ['menu'],
    '#states' => [
      'invisible' => [
        'input[name="menu[enabled]"]' => ['checked' => FALSE],
      ],
    ],
  ];

  // Populate the element with the link data.
  foreach (['id', 'entity_id'] as $key) {
    $form['menu']['link'][$key] = ['#type' => 'value', '#value' => $defaults[$key]];
  }

  $form['menu']['link']['title'] = [
    '#type' => 'textfield',
    '#title' => t('Menu link title'),
    '#default_value' => $defaults['title'],
    '#maxlength' => $defaults['title_max_length'],
  ];

  $form['menu']['link']['description'] = [
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => $defaults['description'],
    '#description' => t('Shown when hovering over the menu link.'),
    '#maxlength' => $defaults['description_max_length'],
  ];

  $form['menu']['link']['menu_parent'] = [
    '#type' => 'select',
    '#title' => t('Which Menu'),
    '#description' => t('Select the menu where you would like this link to appear. Some menus may not show on your page if they are not included in your Page Layout.'),
    '#options' => $vsite_menus,
    '#default_value' => $defaults['menu_name'],
    '#attributes' => [
      'class' => ['menu-parent-select'],
    ],
  ];

  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'os_publications_bibcite_reference_form_submit';
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function os_publications_bibcite_reference_insert(EntityInterface $entity) {
  $is_published = $entity->get('status')->getValue();

  if ($is_published[0]['value']) {
    /** @var \Drupal\os_publications\Plugin\CitationDistribution\CitationDistributePluginManager $type */
    $type = \Drupal::service('os_publications.manager_citation_distribute');
    $type->distribute($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function os_publications_bibcite_reference_update(EntityInterface $entity) {
  $is_published = $entity->get('status')->getValue();

  if ($is_published[0]['value']) {
    /** @var \Drupal\os_publications\Plugin\CitationDistribution\CitationDistributePluginManager $type */
    $type = \Drupal::service('os_publications.manager_citation_distribute');
    $type->distribute($entity);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function os_publications_bibcite_reference_delete(EntityInterface $entity) {
  $is_published = $entity->get('status')->getValue();

  if ($is_published[0]['value']) {
    /** @var \Drupal\os_publications\Plugin\CitationDistribution\CitationDistributePluginManager $type */
    $type = \Drupal::service('os_publications.manager_citation_distribute');
    $type->conceal($entity);
  }
}

/**
 * Implements hook_repec_template_alter().
 */
function os_publications_repec_template_alter(array &$data, ContentEntityInterface $entity) {
  /** @var \Drupal\os_publications\RepecHelperInterface $repec_helper */
  $repec_helper = new RepecHelper($entity);
  /** @var \Drupal\bibcite_entity\Entity\ContributorInterface[] $contributors */
  $contributors = $repec_helper->getContributor();

  foreach ($contributors as $contributor) {
    $data[] = [
      'attribute' => 'Author-Name',
      'value' => $contributor->getName(),
    ];
  }

  /** @var \Drupal\bibcite_entity\Entity\KeywordInterface[] $keywords */
  $keywords = $repec_helper->getKeywords();

  if ($keywords) {
    $keywords_as_text = array_map(function (KeywordInterface $keyword) {
      return $keyword->getName();
    }, $keywords);

    $data[] = [
      'attribute' => 'Keywords',
      'value' => implode(', ', $keywords_as_text),
    ];
  }
}

/**
 * Implements hook_repec_template_SERIES_alter().
 */
function os_publications_repec_template_ecbook_alter(array &$data, ContentEntityInterface $entity) {
  /** @var array $publisher */
  $publisher = $entity->get('bibcite_publisher')->getValue();

  if ($publisher) {
    $data[] = [
      'attribute' => 'Provider-Name',
      'value' => $publisher[0]['value'],
    ];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function os_publications_form_bibcite_reference_confirm_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Only act on bibcite_reference delete confirmation forms.
  if (strpos($form_id, '_delete_form') === FALSE) {
    return;
  }

  $form['actions']['submit']['#submit'][] = 'os_publications_alter_post_bibcite_reference_delete_redirect';
}

/**
 * Alters redirect location after a bibcite_reference is deleted.
 *
 * @ingroup forms
 */
function os_publications_alter_post_bibcite_reference_delete_redirect(array &$form, FormStateInterface $form_state) {
  $form_state->setRedirect('view.publications.page_1');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function os_publications_preprocess_bibcite_citation(&$variables) {

  $citation_styler = \Drupal::service('bibcite.citation_styler');
  $site_wide_style = $citation_styler->getStyle()->id();
  $publications_config = \Drupal::configFactory()->get('os_publications.settings');
  $vsite_style = $publications_config->get('default_style') ?? $site_wide_style;

  // Change sitewide config for rendering citation.
  $citation_styler->setStyleById($vsite_style);

  // Get current route name.
  $route_name = \Drupal::routeMatch()->getRouteName();
  // If publication view page.
  if ($route_name === 'entity.bibcite_reference.canonical') {
    /** @var \Drupal\bibcite_entity\Entity\Reference $publication */
    $publication = \Drupal::routeMatch()->getParameter('bibcite_reference');
    $text = Markup::create($publication->html_title->value);
    $link = $publication->toLink($text)->toString();
    $variables['data']['title'] = $link;
  }

  // Alteration for hca style to match D7.
  if ($vsite_style == 'harvard_chicago_author_date') {
    if ($variables['data']['type'] == 'article-journal' || $variables['data']['type'] == 'chapter') {
      \Drupal::service('os_publications.citation_helper')->alterAuthors($variables['data']);
    }
  }

  /** @var \Drupal\bibcite\CitationStylerInterface $styler */
  $styler = \Drupal::service('bibcite.citation_styler');
  $data = $variables['data'];

  // If more than one author or editor , remove extra commas.
  $markup_string = str_replace(' ,', '', $styler->render($data));

  $variables['content'] = [
    '#markup' => $markup_string,
    '#cache' => [
      'tags' => ['publication_citation'],
    ],
  ];

  // Put site wide config back to default style.
  $citation_styler->setStyleById($site_wide_style);

  // If it is publication view page and shorten url setting is on,
  // add a shortented url to the citation.
  if ($publications_config->get('shorten_citations') && $route_name === 'entity.bibcite_reference.canonical') {
    $current_uri = \Drupal::request()->getUri();
    $url_text = shorten_url($current_uri);
    $url = Url::fromUri($url_text);
    $short_url = Link::fromTextAndUrl($url_text, $url)->toString();

    // Get entity id to be passed to export button.
    $id = \Drupal::routeMatch()->getParameter('bibcite_reference')->id();
    // Append additional links to the citation.
    $variables['content']['#markup'] .= '<span class="short-link">' . t("Copy at") . "&nbsp;$short_url" . '</span>';

    // Get export button render array , get it's html and append to citation.
    $export_array = \Drupal::service('os_publications.citation_helper')->getCitationDownloadButton($id);
    $vsite = \Drupal::service('vsite.context_manager')->getActiveVsite();
    if ($export_array && $vsite) {
      $export_button = \Drupal::service('renderer')->render($export_array);
      $variables['content']['#markup'] .= $export_button;
      $variables['content']['#allowed_tags'] = [
        'a', 'button', 'ul', 'li', 'span', 'div', 'em', 'sub', 'sup',
      ];
    }
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function os_publications_editor_js_settings_alter(array &$settings) {
  // Badly affects the citation output if not set to false.
  $settings['editor']['formats']['title_filter']['editorSettings']['autoParagraph'] = FALSE;
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function os_publications_bibcite_reference_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($display->getMode() === 'teaser') {
    // Check note in teaser setting and unset it if setting is off.
    $publications_config = \Drupal::configFactory()->get('os_publications.settings');
    $note_in_teaser = $publications_config->get('note_in_teaser');
    if (!$note_in_teaser) {
      unset($build['notes']);
    }
  }

  // If publication has pmid entered, show pubmed link.
  if ($display->getMode() === 'citation') {
    if ($build['#bibcite_reference']->bibcite_pmid->value) {
      // Use bibcite module's bibcite link plugin to generate the pubmed link.
      $manager = \Drupal::service('plugin.manager.bibcite_link');
      $instance = $manager->createInstance('pubmed');
      if ($link = $instance->build($entity)) {
        $build['pubmed_link'] = [
          '#markup' => '<span class = "citation-links-pubmed">' . \Drupal::service('renderer')->render($link) . '</span>',
          '#weight' => 50,
        ];
      }
    }
    $changed = $entity->changed->value;
    $build['changed'] = [
      '#markup' => '<span class="last-updated"><i>' . t("Last updated on@sp", ['@sp' => ' ']) . \Drupal::service('date.formatter')->format($changed, 'custom', 'm/d/Y') . '</i></span>',
      '#weight' => 49,
    ];
  }
}

/**
 * Handles extra submit operations for publications.
 */
function os_publications_bibcite_reference_form_submit(&$form, FormStateInterface $formState) {
  $values = $formState->getValues();
  $reference = $formState->getFormObject()->getEntity();
  /** @var \Drupal\cp_menu\MenuHelperInterface $menu_helper */
  $menu_helper = \Drupal::service('cp_menu.menu_helper');
  /** @var \Drupal\group\Entity\GroupInterface $vsite */
  $vsite = \Drupal::service('vsite.context_manager')->getActiveVsite();

  $menu_helper->publicationInFormMenuAlterations($values, $reference, $vsite);
}
